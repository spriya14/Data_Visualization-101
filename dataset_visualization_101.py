# -*- coding: utf-8 -*-
"""Dataset_Visualization 101.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K68pPSONt0Ou2wk4_23Xw629mgaczgnS
"""

#Importing all required libraries

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
import sklearn as sklearn

import matplotlib.pyplot as mlt
import io

from sklearn.model_selection import train_test_split

import io


dataframe_all = pd.read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")

#df.head()
dataframe_all.head()

num_rows = dataframe_all.shape[0]

num_rows

#DATA CLEANING.

#Count the number of missing elements in each row!

count_null = dataframe_all.isnull().sum() # counting the number of missing columns and returning the sum of the values.

counter_without_null = count_null[count_null == 0] # these are columns which does not have null values.

dataframe_all = dataframe_all[counter_without_null.keys()]

#Removing First seven Columns

dataframe_all = dataframe_all.ix[:,7:]

#Priting list of columns

all_columns=dataframe_all.columns

##DATA CLEANING IS DONE!!!!

## NOW GEETING FEATURES FROM DATA TO START PLOTTING.

x = dataframe_all.ix[:,:-1].values

standard_scaler = StandardScaler()
x_std = standard_scaler.fit_transform(x)

## GET CLASS LABEL AND THEN ENCODE IT TO A NUMBER!

y = dataframe_all.ix[:,-1].values

class_label = np.unique(y) # this gives all the unique label used in that column

label_encoder = LabelEncoder()

y = label_encoder.fit_transform(y)

class_label

#Splitting the data into Training and Test

test_percentage = 0.1

x_train, x_test, y_train, y_test = train_test_split(x_std, y, test_size = test_percentage, random_state = 0) # Need to understand this line.

##T-SNE Visualization.

from sklearn.manifold import TSNE

tsne = TSNE()

tsne1 = TSNE(n_components = 2, random_state =0)

x_test_2d = tsne1.fit_transform(x_test)

##SCTTER PLOTTING THE SAMPLE POINTS

markers=('s', 'd', 'o', '^', 'v')
color_map = {0:'red', 1:'blue', 2:'lightgreen', 3:'purple', 4:'cyan'}
mlt.figure()
for idx, cl in enumerate(np.unique(y_test)):
    mlt.scatter(x=x_test_2d[y_test==cl,0], y=x_test_2d[y_test==cl,1], c=color_map[idx], marker=markers[idx], label=cl)
mlt.xlabel('X in t-SNE')
mlt.ylabel('Y in t-SNE')
mlt.legend(loc='upper left')
mlt.title('t-SNE visualization of test data')
mlt.show()

